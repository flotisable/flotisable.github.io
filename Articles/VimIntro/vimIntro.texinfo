\input texinfo
@c %**start of header
@setfilename vimIntro
@documentencoding UTF-8
@settitle Vim 介紹 0.1.0
@c %**end of header

@copying
這是用來介紹 vim 文檔

Copyright @copyright{} 2017 Flotisable
@end copying

@titlepage
@title Vim 介紹 0.1.0
@author Flotisable
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@c begin top
@ifnottex
@node Top
@top
@end ifnottex

    Vim 是一個純文字編輯器，是從過去在 Unix 上流行的文字編輯器 Vi 所衍生出來的，其代表的意義是 Vi IMproved，也就是改良版的 Vi。Vim 與一般常見的文字編輯器有個很大的不同，它是一種模式編輯器( mode editor )，顧名思義它是透過不同模式的切換來做編輯。這帶來的好處是，藉由賦予不同模式不同的快捷鍵，Vim 可以使用英文字母的區域來達到大量的編輯效果。也就是說在鍵盤上我們輸入文字的區塊也可以是編輯文字的區塊，這使得在熟悉 Vim 的按鍵之後可以達到高速的編輯。而因為 Vim 的這個特性，所有文字編輯的功能都可以只靠鍵盤來做到，滑鼠就變得無用武之地了。

    捨棄滑鼠以及在同樣的鍵盤區塊所帶來的編輯效率在親身體驗之後真的會有很明顯的感受。因為手指需要移動的距離變小，所以可以很快的做到很多事。而 Vim 對於初學者的缺點是學習曲線較高，需要學一段時間才能有明顯的效果。Vim 支援的平台還蠻多元的，因此只要學會了，不管到什麼平台都能使用，學習的報酬率還是蠻高的。Vim 也同時提供了終端機與 GUI 的版本，如果想要比較漂亮的介面的話可以使用 GUI 的版本。雖然 Vim 可以設定使用滑鼠(在GUI中好像是預設值)，但我認為這樣就會失去了一些使用 Vim 的價值。

    Vim 除了高速的編輯與跨平台的優點之外，它也是個小而快的程式，在我的電腦中好像不到 10 MB。那麼接下來我會一步步介紹我所知道的 Vim 的功能，希望會對看這份文件的人有所幫助。

@menu
* 我只要知道最基本的生存知識就好了: Basic. 
* 給我魚不如教我如何釣魚: Help.
* 我想知道多一點: LearnMore.
@end menu
@c end top

@c begin chapter 我只要知道最基本的生存知識就好了
@node Basic
@chapter 我只要知道最基本的生存知識就好了

    我想一個文字編輯器最基本的應該就是要如何輸入文字、儲存檔案與離開編輯器了吧。只要知道這些就能做最低限度的編輯，而對於使用 Vim 的初學者來說，這三件事卻不是這麼的容易。

    在介紹這三個基本操作之前，要先簡單介紹一下 Vim 的三個模式：普通模式( normal mode )、插入模式( insert mode )與命令模式( command mode )。在最開始的簡介也有提到，Vim 是個模式編輯器，而這三個模式是在使用 Vim 的時候最常用的三個模式。在預設的情況下 Vim 在開啟時會進入普通模式，這個模式也是我認為 Vim 在文字編輯上最強大的模式，基本上每個符號按鍵都對應到一個編輯功能，詳細之後會慢慢介紹。這裡只提兩個按鍵，@kbd{i} 與 @kbd{:}。這兩個按鍵的功能分別是『進入插入模式』與『進入命令模式』。

    在按下 @kbd{i} 進入插入模式後，Vim 的左下方應該會出現 @emph{INSERT} 的字。而 i 就是 insert 的縮寫，在普通模式中許多的按鍵都像 @kbd{i} 這樣可以用英文縮寫來記，因此不容易忘。進入了插入模式之後就跟一般常用的編輯器差不多了，任何輸入的符號都是在文件中插入對應的符號。可以想成一般的編輯器預設就是進入插入模式。在輸入完文字之後只要按下 @kbd{@key{ESC}} 就會回到普通模式了。

    在按下 @kbd{:} 進入命令模式後，游標應該會跑到 Vim 的最下方，並在行首顯示 : 符號。跟插入模式一樣，可以像一般的編輯器輸入文字，只是文字只會在視窗最下方，而這些輸入的文字就是在對 Vim 下命令，按下 @kbd{@key{RET}} 之後 Vim 會執行輸入的命令。在這裡我要介紹的是存檔與離開編輯器的命令，分別是 @command{write} 與 @command{quit}。如果不想打這麼多字的話，Vim 對常用的命令提供了縮寫，而這兩個命令的縮寫分別是 w 與 q，也就是第一個字母。有時候我們在修改文件後並不想存檔而想直接離開編輯器，這時 Vim 會跳出錯誤說文件被修改不能離開。只要在 @command{quit} 最後加上 ! ( 強制執行的概念 ) 便能不存檔而離開。另外我們常常想在存檔後直接離開編輯器，這時候可以直接將這兩個命令的縮寫連在一起輸入 wq ，Vim 就會同時執行這兩個命令。值得注意的是，這是 Vim 為這兩個命令縮寫提供的功能，基本上就是另一個命令，所以不是對每個命令都適用。

    這樣三個基本的操作就介紹完了，可以自己實際嘗試看看，這樣才會記得起來。
@c end chapter 我只要知道最基本的生存知識就好了

@c begin chapter 給我魚不如教我如何釣魚
@node Help
@chapter 給我魚不如教我如何釣魚

    畢竟我自己使用 vim 大概約一年多而已，所以知道的知識並不算多，vim 也還有許多神奇的功能可以去研究。為了想自學或是想我這種堅持看官方文檔的人，來簡單介紹一下 vim 內建的文檔。

    vim 其實本身就帶了蠻不錯的文檔，只要在進入 vim 之後按下 @kbd{:} 進入命令模式輸入 @command{help} 這個命令，這樣就會開啟 vim 內建的文檔。內建的文檔預設是英文，不過有需多人協助這些文檔的翻譯，其中也包括中文，所以如果喜歡看中文的人可以上網去找一找就可以找到如何安裝中文文檔了。值得一提的是，中文文檔主要是簡體中文，不過也有人利用一些程式將它轉成繁體中文，但我是不知道看起來感覺如何。

    內建的文檔大致分成了三個區塊，第一部份是簡單的介紹 vim 相關的事。第二部份的文檔名稱都是 usr 開頭，這一部份是從頭教新手如何使用 vim ，寫得很不錯，只要將它看完，對 vim 的使用也算有一定的理解了，我自己也是這樣慢慢看來學習如何使用 vim 的(雖然沒看完，只看到 usr_41 )。最後一部份是詳細的介紹 vim 的各種功能，在需要深入研究 vim 的時候才會需要看。在看文檔時有兩個按鍵可以記一下，分別是 @kbd{@key{CTRL}-]} 與 @kbd{@key{CTRL}-t}。在 vim 的文檔中會有許多的標籤，會用不同的顏色顯示，將游標移到上面按下 @kbd{@key{CTRL}-]} 便會跳到相對應的文檔，而按下 @kbd{@key{CTRL}-t}則會跳回原本標籤所在的位置。這樣在看文檔的時候會方便許多。

    另外一種跳到不同文檔的方式是在 @command{help} 後面加上文檔名稱或是標籤名稱。比如說 @kbd{help usr_01.txt} 就會跳到 usr_01.txt 這個文檔，而 @kbd{help quit} 就會跳到 quit 這個標籤所在的文檔。在 vim 的文檔中，每個命令、選項、按鍵等都有相對應的標籤，也就是說如果想要查某個功能只要在 @command{help} 後面加上這個功能的名稱就可以了。這種方式也可以用 @kbd{@key{CTRL}-t} 來跳回原本所在的文檔。更詳細的部份就請自己看文檔吧(因為我也只會這些了)。 

    除了文檔之外，vim 本身還提供了另一種讓新手學習的文件，在終端機下只要打 @kbd{vimtutor} 就會開啟一個它預計30分鐘會結束的簡單教學。它是屬於動手做的方式，先跟你講如何操作，然後讓你實際使用，這樣比較會知道這些按鍵實際到底會發生什麼事。如果是在其他環境下要用的話，請 @kbd{help vimtutor} 來看詳細要如何使用。
@c end chapter 給我魚不如教我如何釣魚

@c begin chapter 我想知道多一點
@node LearnMore
@chapter 我想知道多一點

    這個部份會介紹一些在普通模式的編輯技巧，學會的話可以加快整體編輯文件的速度。

@menu
* 自由自在的移動: Move
@end menu

@c begin section 自由自在的移動
@node Move
@section 自由自在的移動

    vim 作為可以完全使用鍵盤來做編輯的編輯器，想當然提供了許多的按鍵來做游標的移動。而這些移動方式主要是用在普通模式之下。除移動之外，接下來介紹的許多東西多為普通模式之下的按鍵，這也是我認為普通模式是 vim 中最強的的模式的原因，同時也是因為我主要只學到這些。各種移動方式並不一定要全部學會，只是學會後的確可以讓移動的速度加快。

@menu
* 基本的移動: MoveBasic
@end menu

@c begin subsection 基本的移動
@node MoveBasic
@subsection 基本的移動

    一般來說，我們是使用上下左右鍵來移動游標，而 vim 為了讓手指移動的距離減少，使用了四個英文字母來做游標的移動，分別是 @kbd{h}, @kbd{j}, @kbd{k}, @kbd{l}。一開始看到這四個英文字母可能會覺得這也太難記吧，但是如果把它對應到鍵盤上(這裡指的是我們常用的QWERTY鍵盤)，可以發現這四個英文字母就在英文字母的右半邊，並且連成一條線，適合右手的四指來按。而記法也蠻簡單的，@kbd{h} 在最左邊是向左移動，@kbd{l} 在最右邊是向右移動，而 @kbd{j}有個勾勾向下是向下移動，剩餘的 @kbd{k} 就只能是向上了。知道了基本的記法後，只要常常使用身體就會自然而然的記下來了。

    vim 的這種移動方式在沒有上下左右鍵或是像筆電鍵盤較小的情況下非常適用。用一用之後真的會有種回不去的感覺。不過對於較大有數字鍵的鍵盤，可能需要將鍵盤橋一下才好用，不然用久了右手手腕會不太舒服(還是這是我個人的問題)。@kbd{h}, @kbd{j}, @kbd{k}, @kbd{l}，一次只會移動一格，這樣子有時候要移動很久游標才會到自己想要的位置。這時候可以在按鍵前加上數字作為前綴，它會讓移動重複前綴數字的次數，像是 @kbd{10j} 就會向下移動十格。我個人是覺得這比較適合配合其他按鍵的時候使用，不過在不同行之間移動的時候也是不錯用啦。值得一提的是，vim 的普通模式下許多按鍵加上數字 n 作為前綴有著重複此按鍵 n 次的意思在，這也是讓 vim 按鍵強大的地方之一。
@c end subsection 基本的移動
@c end section 自由自在的移動
@c end chapter 我想知道多一點

@bye
