\input texinfo
@c %**start of header
@setfilename vimIntro
@documentencoding UTF-8
@settitle Vim 介紹 0.1.0
@c %**end of header

@copying
這是用來介紹 vim 文檔

Copyright @copyright{} 2017 Flotisable
@end copying

@titlepage
@title Vim 介紹 0.1.0
@author Flotisable
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@c begin top
@ifnottex
@node Top
@top
@end ifnottex

    Vim 是一個純文字編輯器，是從過去在 Unix 上流行的文字編輯器 Vi 所衍生出來的，其代表的意義是 Vi IMproved，也就是改良版的 Vi。Vim 與一般常見的文字編輯器有個很大的不同，它是一種模式編輯器( mode editor )，顧名思義它是透過不同模式的切換來做編輯。這帶來的好處是，藉由賦予不同模式不同的快捷鍵，Vim 可以使用英文字母的區域來達到大量的編輯效果。也就是說在鍵盤上我們輸入文字的區塊也可以是編輯文字的區塊，這使得在熟悉 Vim 的按鍵之後可以達到高速的編輯。而因為 Vim 的這個特性，所有文字編輯的功能都可以只靠鍵盤來做到，滑鼠就變得無用武之地了。

    捨棄滑鼠以及在同樣的鍵盤區塊所帶來的編輯效率在親身體驗之後真的會有很明顯的感受。因為手指需要移動的距離變小，所以可以很快的做到很多事。而 Vim 對於初學者的缺點是學習曲線較高，需要學一段時間才能有明顯的效果。Vim 支援的平台還蠻多元的，因此只要學會了，不管到什麼平台都能使用，學習的報酬率還是蠻高的。Vim 也同時提供了終端機與 GUI 的版本，如果想要比較漂亮的介面的話可以使用 GUI 的版本。雖然 Vim 可以設定使用滑鼠(在GUI中好像是預設值)，但我認為這樣就會失去了一些使用 Vim 的價值。

    Vim 除了高速的編輯與跨平台的優點之外，它也是個小而快的程式，在我的電腦中好像不到 10 MB。那麼接下來我會一步步介紹我所知道的 Vim 的功能，希望會對看這份文件的人有所幫助。

@menu
* 我只要知道最基本的生存知識就好了: Basic. 
* 給我魚不如教我如何釣魚: Help.
* 我想知道多一點: LearnMore.
@end menu
@c end top

@c begin chapter 我只要知道最基本的生存知識就好了
@node Basic
@chapter 我只要知道最基本的生存知識就好了

    我想一個文字編輯器最基本的應該就是要如何輸入文字、儲存檔案與離開編輯器了吧。只要知道這些就能做最低限度的編輯，而對於使用 Vim 的初學者來說，這三件事卻不是這麼的容易。

    在介紹這三個基本操作之前，要先簡單介紹一下 Vim 的三個模式：普通模式( normal mode )、插入模式( insert mode )與命令模式( command mode )。在最開始的簡介也有提到，Vim 是個模式編輯器，而這三個模式是在使用 Vim 的時候最常用的三個模式。在預設的情況下 Vim 在開啟時會進入普通模式，這個模式也是我認為 Vim 在文字編輯上最強大的模式，基本上每個符號按鍵都對應到一個編輯功能，詳細之後會慢慢介紹。這裡只提兩個按鍵，@kbd{i} 與 @kbd{:}。這兩個按鍵的功能分別是『進入插入模式』與『進入命令模式』。

    在按下 @kbd{i} 進入插入模式後，Vim 的左下方應該會出現 @emph{INSERT} 的字。而 i 就是 insert 的縮寫，在普通模式中許多的按鍵都像 @kbd{i} 這樣可以用英文縮寫來記，因此不容易忘。進入了插入模式之後就跟一般常用的編輯器差不多了，任何輸入的符號都是在文件中插入對應的符號。可以想成一般的編輯器預設就是進入插入模式。在輸入完文字之後只要按下 @kbd{@key{ESC}} 就會回到普通模式了。

    在按下 @kbd{:} 進入命令模式後，游標應該會跑到 Vim 的最下方，並在行首顯示 : 符號。跟插入模式一樣，可以像一般的編輯器輸入文字，只是文字只會在視窗最下方，而這些輸入的文字就是在對 Vim 下命令，按下 @kbd{@key{RET}} 之後 Vim 會執行輸入的命令。在這裡我要介紹的是存檔與離開編輯器的命令，分別是 @command{write} 與 @command{quit}。如果不想打這麼多字的話，Vim 對常用的命令提供了縮寫，而這兩個命令的縮寫分別是 w 與 q，也就是第一個字母。有時候我們在修改文件後並不想存檔而想直接離開編輯器，這時 Vim 會跳出錯誤說文件被修改不能離開。只要在 @command{quit} 最後加上 ! ( 強制執行的概念 ) 便能不存檔而離開。另外我們常常想在存檔後直接離開編輯器，這時候可以直接將這兩個命令的縮寫連在一起輸入 wq ，Vim 就會同時執行這兩個命令。值得注意的是，這是 Vim 為這兩個命令縮寫提供的功能，基本上就是另一個命令，所以不是對每個命令都適用。

    這樣三個基本的操作就介紹完了，可以自己實際嘗試看看，這樣才會記得起來。
@c end chapter 我只要知道最基本的生存知識就好了

@c begin chapter 給我魚不如教我如何釣魚
@node Help
@chapter 給我魚不如教我如何釣魚

    畢竟我自己使用 vim 大概約一年多而已，所以知道的知識並不算多，vim 也還有許多神奇的功能可以去研究。為了想自學或是想我這種堅持看官方文檔的人，來簡單介紹一下 vim 內建的文檔。

    vim 其實本身就帶了蠻不錯的文檔，只要在進入 vim 之後按下 @kbd{:} 進入命令模式輸入 @command{help} 這個命令，這樣就會開啟 vim 內建的文檔。內建的文檔預設是英文，不過有需多人協助這些文檔的翻譯，其中也包括中文，所以如果喜歡看中文的人可以上網去找一找就可以找到如何安裝中文文檔了。值得一提的是，中文文檔主要是簡體中文，不過也有人利用一些程式將它轉成繁體中文，但我是不知道看起來感覺如何。

    內建的文檔大致分成了三個區塊，第一部份是簡單的介紹 vim 相關的事。第二部份的文檔名稱都是 usr 開頭，這一部份是從頭教新手如何使用 vim ，寫得很不錯，只要將它看完，對 vim 的使用也算有一定的理解了，我自己也是這樣慢慢看來學習如何使用 vim 的(雖然沒看完，只看到 usr_41 )。最後一部份是詳細的介紹 vim 的各種功能，在需要深入研究 vim 的時候才會需要看。在看文檔時有兩個按鍵可以記一下，分別是 @kbd{@key{CTRL}-]} 與 @kbd{@key{CTRL}-t}。在 vim 的文檔中會有許多的標籤，會用不同的顏色顯示，將游標移到上面按下 @kbd{@key{CTRL}-]} 便會跳到相對應的文檔，而按下 @kbd{@key{CTRL}-t}則會跳回原本標籤所在的位置。這樣在看文檔的時候會方便許多。

    另外一種跳到不同文檔的方式是在 @command{help} 後面加上文檔名稱或是標籤名稱。比如說 @kbd{help usr_01.txt} 就會跳到 usr_01.txt 這個文檔，而 @kbd{help quit} 就會跳到 quit 這個標籤所在的文檔。在 vim 的文檔中，每個命令、選項、按鍵等都有相對應的標籤，也就是說如果想要查某個功能只要在 @command{help} 後面加上這個功能的名稱就可以了。這種方式也可以用 @kbd{@key{CTRL}-t} 來跳回原本所在的文檔。更詳細的部份就請自己看文檔吧(因為我也只會這些了)。 

    除了文檔之外，vim 本身還提供了另一種讓新手學習的文件，在終端機下只要打 @kbd{vimtutor} 就會開啟一個它預計30分鐘會結束的簡單教學。它是屬於動手做的方式，先跟你講如何操作，然後讓你實際使用，這樣比較會知道這些按鍵實際到底會發生什麼事。如果是在其他環境下要用的話，請 @kbd{help vimtutor} 來看詳細要如何使用。
@c end chapter 給我魚不如教我如何釣魚

@c begin chapter 我想知道多一點
@node LearnMore
@chapter 我想知道多一點

    這個部份會介紹一些在普通模式的編輯技巧，學會的話可以加快整體編輯文件的速度。

@menu
* 自由自在的移動: Move
* 隨選隨剪亂亂貼: CutCopyPaste
@end menu

@c begin section 自由自在的移動
@node Move
@section 自由自在的移動

    vim 作為可以完全使用鍵盤來做編輯的編輯器，想當然提供了許多的按鍵來做游標的移動。而這些移動方式主要是用在普通模式之下。除移動之外，接下來介紹的許多東西多為普通模式之下的按鍵，這也是我認為普通模式是 vim 中最強的的模式的原因，同時也是因為我主要只學到這些。各種移動方式並不一定要全部學會，只是學會後的確可以讓移動的速度加快。

@menu
* 基本的移動:   MoveBasic
* 單行間的移動: MoveInLine
* 行間的移動:   MoveBetweenLine
* 文字間的移動: MoveBetweenWord
* 其他:         OtherMotionRelated
@end menu

@c begin subsection 基本的移動
@node MoveBasic
@subsection 基本的移動

    一般來說，我們是使用上下左右鍵來移動游標，而 vim 為了讓手指移動的距離減少，使用了四個英文字母來做游標的移動，分別是 @kbd{h}, @kbd{j}, @kbd{k}, @kbd{l}。一開始看到這四個英文字母可能會覺得這也太難記吧，但是如果把它對應到鍵盤上(這裡指的是我們常用的QWERTY鍵盤)，可以發現這四個英文字母就在英文字母的右半邊，並且連成一條線，適合右手的四指來按。而記法也蠻簡單的，@kbd{h} 在最左邊是向左移動，@kbd{l} 在最右邊是向右移動，而 @kbd{j}有個勾勾向下是向下移動，剩餘的 @kbd{k} 就只能是向上了。知道了基本的記法後，只要常常使用身體就會自然而然的記下來了。

    vim 的這種移動方式在沒有上下左右鍵或是像筆電鍵盤較小的情況下非常適用。用一用之後真的會有種回不去的感覺。不過對於較大有數字鍵的鍵盤，可能需要將鍵盤橋一下才好用，不然用久了右手手腕會不太舒服(還是這是我個人的問題)。@kbd{h}, @kbd{j}, @kbd{k}, @kbd{l}，一次只會移動一格，這樣子有時候要移動很久游標才會到自己想要的位置。這時候可以在按鍵前加上數字作為前綴，它會讓移動重複前綴數字的次數，像是 @kbd{10j} 就會向下移動十格。我個人是覺得這比較適合配合其他按鍵的時候使用，不過在不同行之間移動的時候也是不錯用啦。值得一提的是，vim 的普通模式下許多按鍵加上數字 n 作為前綴有著重複此按鍵 n 次的意思在，這也是讓 vim 按鍵強大的地方之一。
@c end subsection 基本的移動

@c begin subsection 單行間的移動
@node MoveInLine
@subsection 單行間的移動

    這個部份會介紹一下在編輯單行時 vim 的一些移動方式，基本上這個部份要之後配合 operator 來用會比較好用。關於 operator 之後會介紹到，現在不需要太清楚。首先來講講如何移動到行首與行尾，@kbd{0} 會移動到行首，@kbd{$} 會移動到行尾。還有另一種移動到行首的方式是 @kbd{^}，只是這個行首的意義有點不一樣，@kbd{^} 是移動到游標所在的那一行第一個非空白字元的字，而 @kbd{0} 是移動到第一個字元。舉個例子，假設游標在 how 的 h 上

@example
         1         2         3
123456789012345678901234567890123
  I want to learn how to use vim.
<-----------------                0
  <---------------                ^
                  --------------> $
@end example

    值得注意的是 @kbd{^}，@kbd{$} 在 regular expression 上也是代表行首與行尾的意思，而 regular expression 在搜尋字串上是個蠻方便的工具，可以一起記一下 。其他的移動方式還有 @kbd{f}, @kbd{F}, @kbd{t}, @kbd{T}，我個人是覺得這比較適合配合 operator 來用。@kbd{f} 與 @kbd{t} 是在單行間找字，其代表的意義分別是 find 與 to，它們可以接受一個符號，並找到單行中離游標右方最近的那個符號。舉個例子，假設游標在 many 的 a 上

@example
  Why vim has so many key bindings?
                  -->               fy
                  ------->          tb
@end example

    在上面的例子可以看到，@kbd{f} 會讓游標移到所要的符號上，而 @kbd{t} 則是到所要的符號的前一個字元。而大寫的 @kbd{F}，@kbd{T} 則是往反方向找，它們會找離游標左方最近的符號。舉個例子，假設游標在 learn 的 r 上

@example
  Why I need to learn so many key bindings?
           <-------                         Fd
       <-----------                         TI
@end example

    與基本的移動一樣，在前面加上數字作為前綴表示重複幾次。比如說，假設游標在 some 的 m 上

@example
  Can we learn some useful key bindings?
    <------------                         2Fn
                 ---------->              3te
@end example

@c end subsection 單行間的移動

@c begin subsection 行間的移動
@node MoveBetweenLine
@subsection 行間的移動

    通常我們在寫程式或是看文件時比較常用到的是行與行之間的移動，vim 在這方面也提供了不少按鍵來達到這件事。首先如果要跳到一個文件的任意行是用 @kbd{G}，前面加上數字作為前綴就會跳到指定的行數，比如 @kbd{50G} 就會跳到第 50 行。因為經常用到，所以vim 提供了另外的按鍵來跳到第一行，即 @kbd{gg}。另一種跳到指定行數的方式是在命令模式輸入行號，比如說 @kbd{:100}，就會跳到第 100 行。

    vim 也提供了在目前所見範圍的移動，@kbd{H}, @kbd{M}, @kbd{L}，分別代表了 High, Middle, Low。直接舉個例子會比較清楚。

@example
  +---------------------------------------+
  |1 #include <iostream>                  | <-- H
  |2 using namespace std;                 |
  |3                                      |
  |4 int main()                           |
  |5 @{                                    | <-- M
  |6   cout << "vim is fun!\n";           |
  |7   cin.get();                         |
  |8   return 0;                          |
  |9 @}                                    | <-- L
  +---------------------------------------+
@end example

    vim 也提供了幾種捲動視窗的方式，像是捲動一頁用 @kbd{@key{CTRL}-F} ( forward, page down ) 與 @kbd{@key{CTRL}-B} ( backword, page up )，捲動半頁用 @kbd{@key{CTRL}-D} ( down ) 與 @kbd{@key{CTRL}-U} ( up )

@c end subsection 行間的移動

@c begin subsection 文字間的移動
@node MoveBetweenWord
@subsection 文字間的移動

    一般使用文字編輯器當然是用來編輯文字的啦(廢話)，想當然爾 vim 提供了一些按鍵來做文字間的移動，讓編輯文字變得方便些。但畢竟 vim 還是從外國發展的，對於英文的支援當然比較好，不過主要也是因為最簡單的文字編碼莫過於 ASCII ，因此 1 byte 的字基本上都是英文，一般其他語系要在文字編輯器中顯示用 UTF-8 會是比較好的選擇，而這通常是 2 byte 以上的字元。當然文字編碼百百種，我也不是很懂，總之這裡講到的文字間的移動主要適用於英文。

    vim 中在文字間移動主要也就四種，向前移動到字首是 @kbd{w} ( word )，向前移動到字尾是 @kbd{e} ( end )，向後移動到字首是 @kbd{b} ( back )，向後移動到字尾是 @kbd{ge}。這裡要提一下我指的向前是往文件尾巴移動，而向後是指往文件的開頭移動。順帶一提，在 vim 裡 @kbd{g} 就像是 @key{CTRL}，@key{ALT} 這種按鍵，本身不會有任何作用，要配合其他按鍵才會有作用。那麼還是舉個例子來讓這幾個按鍵清楚一點，假設游標在 word 的 r 上

@example
  Let's try to use the word motion in vim.
                         --->               w
                         ->                 e
                       <-                   b
                     <---                   ge
@end example

    同樣的，這些按鍵可以加上數字前綴來重複執行。舉個例子，假設游標在 with 的 t 上

@example
  Using word motion with number as prefix.
                      ---------->           2w
                      ----------->          3e
  <-------------------                      4b
@end example

    在這裡我得說，@kbd{ge} 我自己是很少在用啦，感覺 @kbd{w}，@kbd{b}，@kbd{e} 這三個按鍵比較常用到。vim 還提供了另一種文字間的移動，只要將前面所講的按鍵改成大寫就行了，也就是 @kbd{W}，@kbd{B}，@kbd{E}，@kbd{gE} (注意 g 依舊是小寫)。這兩種有什麼差別呢，大寫的移動方式是用空白字元來區分文字，而空白字元一般指空白鍵、@key{TAB} 以及換行鍵。至於小寫的移動方式大致上是以英文、數字、_ 所組成的字當作文字，其他符號都視為一個字，而這可以另外做設定。舉個例子比較清楚，假設游標在 string 的 r 上

@example
    const vector<string> name = @{ "Bjarne Stroustrup", "Steve Jobs" @};
                   ---->    w
                   ------>  W
                   --->     e
                   ---->    E
                 <-         b
          <--------         B
@end example

    可以偶爾嘗試看看文字間的移動，在寫程式或閱讀英文文件很方便喔！

@c end subsection 文字間的移動

@c subsection 其他
@node OtherMotionRelated
@subsection 其他

    vim 的移動當然不只前面講的這些，vim 可是很複雜的呢，所以我也還沒參透。不過前面介紹的移動方式是比較基本的一些，熟悉一些可以讓文字編輯靈活一點。接下來講一、兩個跟移動相關的設定與按鍵。首先要提到的是，若要善用行間的移動，讓文字編輯器顯示行號是不可或缺的，畢竟要靠人腦慢慢計算這到底是第幾行或是這兩行差幾行不是很有效率，讓編輯器自己顯示可以讓生活更美好(是也沒這麼誇張)。總之來講講如何做這些設定，設定基本上都是靠命令模式處理，如果想要讓 vim 顯示行號，就在命令模式輸入 @kbd{set number}，這樣就會顯示行號了。如果想簡短一點可以打 @kbd{set nu}。相反的，如果你看行號不爽可以在命令模式輸入 @kbd{set nonumber} 或是 @kbd{set nonu} 來把它取消掉。

    單純顯示行號主要是在閱讀程式的時候比較好看，但在配合 vim 的移動上還是有一些不方便，這時候可以使用相對行號。這基本上是為了 vim 的按鍵而生的設定，它會顯示游標所在行到各個行之間差幾行，配合 @kbd{j}，@kbd{k} 加上數字前綴會讓移動上更方便。要設定相對行號只要在命令模式輸入 @kbd{set relativenumber} 或 @kbd{set rnu} 就可以了，而取消則是 @kbd{set norelativenumber} 或 @kbd{set nornu}。

    再來講個我覺得閱讀文件蠻方便的按鍵，@kbd{zz}，@kbd{zt} 與 @kbd{zb}。這三個按鍵分別會將游標所在的那一行移動到視窗的中間、最上面( top )與最下面( bottom )，這樣在閱讀文件時就不一定要用捲動的方式來調整所見的範圍，可以比較簡單的將文章喬到一個容易閱讀的位置，我個人是覺得不錯用啦，看各位喜不喜歡囉。順帶一提，@kbd{z} 跟 @kbd{g} 一樣是要配合其他按鍵才有作用，而就目前我所知 @kbd{z} 比較會用在閱讀相關的按鍵上，所以我是用 zoom 來記它的。

@c end subsection 其他
@c end section 自由自在的移動

@c begin section 隨選隨剪亂亂貼
@node CutCopyPaste
@section 隨選隨剪亂亂貼

    在做文字編輯時，我們常常會需要選取文字並將它移動到其他地方，或是刪掉它。接下來要介紹的就是如何在 vim 之中做到這些事。

@menu
* 選取文字:         VisualMode
* 剪下、複製與貼上: DeleteCopyPaste
@end menu

@c begin subsection 選取文字
@node VisualMode
@subsection 選取文字

    vim 為文字選取特別建立了一個模式，稱為可視模式( Visual Mode )。中文是這樣翻啦，不過這個模式還是英文比較好聽點。在 visual mode 下，還是可以使用普通模式下的移動方式，差別在於游標移動時所經過的區域會被反白，也就是被選取起來的意思。而被選取的區域可以用運算子對其做操作，至於 vim 中有哪些運算子，後面會慢慢介紹到，等不及的人可以 @kbd{:help operator} 來看看 vim 提供了哪些運算子。

    vim 選取文字有三種方式，字元選取是用 @kbd{v} ( visual 的意思 )，這就是一般我們使用滑鼠的選取方式。行的選取用 @kbd{V}，這個選取方式差別在於選取的單位是一行。另外還有個區塊選取是用 @kbd{@key{CTRL}-v}，選取的會是一個矩形。一般比較常用的應該還是字元選取，行的選取適用於刪除或移動多行。至於區塊選取，這比較適合用在類似格式的資料，像是表格這種固定格式的資料。基本上選取的範圍就是我們進入 visual mode 時的游標位置到目前游標所在位置所框出來的範圍，根據不同的選取方式，反白的地方會有小小的不同。要取消選取，離開 visual mode，和插入模式一樣按下 @key{ESC} 就行啦。

    在選取文字時，如果只能維持一個方向做選取，那就會被進入 visual mode 的位置所限制。vim 提供了一個按鍵來將現在游標的位置和進入 visual mode 的位置交換，當我們想要換邊做選取時，按下 @kbd{o} 游標就會跑到另外一端了。o 是 other 的意思，即另外一邊。文字選取與行的選取是有兩邊沒錯，但如果是區塊選取呢？矩形是有四個角的。在區塊選取時，按下 @kbd{o} 只會在矩形的對角線上換邊，如果要換一條對角線，就要按下 @kbd{O}，同樣是 other 的意思，但藉由大小寫來賦予不同的換邊方式。
@c end subsection 選取文字

@c begin subsection 剪下複製貼上
@node DeleteCopyPaste
@subsection 剪下複製與貼上

    如果只能選取文字，那一點用也沒有，所以接下來會介紹如何複製或剪下選取的文字，並將它貼到其他地方。首先先來講一下在普通模式要如何刪除文字，@kbd{x} 和 @kbd{X}，功能分別為 @key{DELETE} 和 @key{BACKSPACE} 鍵，也就是刪除游標前的字元跟刪除游標下的字元。@kbd{x} 和 @kbd{X} 也可以在前面加上數字作前綴來重複操作。

    接下來講如何刪除和複製選取的文字，選好文字後按下 @kbd{d} ( delete ) 就會刪除選取的文字，而按下 @kbd{y} ( yank ) 則會複製選取的文字。順帶一提，@kbd{d} 和 @kbd{y} 兩個都是 vim 的運算子，詳細當然之後再說啦，現在只要會配合文字選取使用就好了。在介紹如何貼上文字之前，要講一個簡單的概念，在 vim 中剪下和刪除是同樣的意思，這和一般使用編輯器的操作不同。一般編輯器剪下和刪除是不同的概念，剪下就是等等要貼到別的地方，所以文字會存起來，而刪除則是不要這些文字，刪掉就掰掰了。但在 vim 中刪除的文字不論原因一概存起來，所以貼上的東西一定是剛剛刪除的東西。對一般人來說可能沒差啦，但我當初學到這個的時候覺得蠻訝異的，概念上差很多啊。

    回歸正題，貼上跟刪除字元很像，只是按鍵不同。@kbd{p} 對應 @kbd{x}，@kbd{P} 對應 @kbd{X}，而 p 是 paste 的意思，即貼上。那麼剪下、複製和貼上就是這樣啦，只要知道英文，相對應的按鍵即為其開頭文字作縮寫，不容易忘記。這裡講講幾個點，首先為什麼複製英文不是常見的 copy，而是要另外查才會知道的 yank 呢？( 還是只有我孤陋寡聞不知道 yank 是複製 ) 理由很簡單，就是 c 已經被拿去當別的功能啦，而 c 的功能和 d 很像，按鍵位置也很近，所以我想是因為這個原因才用比較少見的字當作複製。另外就是，在選取文字後，按下 @kbd{x} 其實和 @kbd{d} 一樣都可以刪掉選取的文字，因為兩個按鍵都是刪除文字，而兩者的差別呢，就在於 @kbd{d} 是運算子。在 visual mode 這兩個按鍵功能是一樣的，但在一般模式下運算子提供了更強大的功能，之後我應該會特別用一個篇幅介紹一下我所知道的運算子。
@c end subsection 剪下複製貼上
@c end section 隨選隨剪亂亂貼
@c end chapter 我想知道多一點

@bye
